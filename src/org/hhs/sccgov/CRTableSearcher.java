package org.hhs.sccgov;

import ca.odell.glazedlists.BasicEventList;
import ca.odell.glazedlists.EventList;
import ca.odell.glazedlists.swing.GlazedListsSwing;
import java.awt.Desktop;
import java.awt.Toolkit;
import java.awt.datatransfer.StringSelection;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.util.Collection;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.Pattern;
import javafx.application.Platform;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.concurrent.Worker;
import javafx.embed.swing.JFXPanel;
import javafx.scene.Scene;
import javafx.scene.web.WebEngine;
import javafx.scene.web.WebEvent;
import javafx.scene.web.WebView;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.StringEscapeUtils;
import org.apache.commons.lang.StringUtils;
import org.hhs.sccgov.log.LogHandler;

/**
 * This class is main form class that handles all the user interface for this application.
 *
 * @author Kesav.Kolla
 */
public class CRTableSearcher extends javax.swing.JFrame {

	/**
	 * Creates new form CRTableSearcher
	 */
	public CRTableSearcher() {
		initComponents();
		this.loaderIcon = new ImageIcon(getClass().getResource("/resources/img/ajax-loader.gif"));
		INVALID_CHARS_PATTERN = Pattern.compile("[^a-z\\*,\\s0-9A-Z_]");
		jfxPanel = new JFXPanel();
		splitPane.setRightComponent(jfxPanel);
		this.LOGHANDLER = new LogHandler(this);
		createScene();
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
	 * content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        listMenu = new javax.swing.JPopupMenu();
        final javax.swing.JMenuItem mnuOpen = new javax.swing.JMenuItem();
        final javax.swing.JMenuItem mnuCopy = new javax.swing.JMenuItem();
        final javax.swing.JPanel jPanel1 = new javax.swing.JPanel();
        final javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        final javax.swing.JPanel jPanel2 = new javax.swing.JPanel();
        final javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        final javax.swing.Box.Filler filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        final javax.swing.JLabel jLabel3 = new javax.swing.JLabel();
        final javax.swing.JPanel jPanel3 = new javax.swing.JPanel();
        final javax.swing.JPanel jPanel4 = new javax.swing.JPanel();
        final javax.swing.JLabel jLabel4 = new javax.swing.JLabel();
        txtFolder = new javax.swing.JTextField();
        btnSelect = new javax.swing.JButton();
        final javax.swing.JLabel jLabel5 = new javax.swing.JLabel();
        txtPattern = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        lblLoader = new javax.swing.JLabel();
        chkClear = new javax.swing.JCheckBox();
        splitPane = new javax.swing.JSplitPane();
        final javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
        resultList = new javax.swing.JList();

        fileChooser.setCurrentDirectory(null);
        fileChooser.setDialogTitle("Select Folder");
        fileChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        fileChooser.setName("fileChooser"); // NOI18N

        listMenu.setName("listMenu"); // NOI18N

        mnuOpen.setText("Open Folder");
        mnuOpen.setName("mnuOpen"); // NOI18N
        mnuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuOpenActionPerformed(evt);
            }
        });
        listMenu.add(mnuOpen);

        mnuCopy.setText("Copy Path");
        mnuCopy.setName("mnuCopy"); // NOI18N
        mnuCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuCopyActionPerformed(evt);
            }
        });
        listMenu.add(mnuCopy);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("resources/CRTableSearcher"); // NOI18N
        setTitle(bundle.getString("project.title")); // NOI18N
        setMinimumSize(new java.awt.Dimension(800, 600));
        setName("mainForm"); // NOI18N
        setPreferredSize(new java.awt.Dimension(800, 600));
        getContentPane().setLayout(new java.awt.BorderLayout(0, 10));

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jPanel1.setName("jPanel1"); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 204, 204));
        jLabel1.setText(bundle.getString("project.title")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N
        jPanel1.add(jLabel1);

        getContentPane().add(jPanel1, java.awt.BorderLayout.NORTH);

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setName("jPanel2"); // NOI18N
        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.LINE_AXIS));

        jLabel2.setText(bundle.getString("project.copyright")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N
        jPanel2.add(jLabel2);

        filler1.setName("filler1"); // NOI18N
        jPanel2.add(filler1);

        jLabel3.setText(bundle.getString("project.version")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N
        jPanel2.add(jLabel3);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        jPanel3.setName("jPanel3"); // NOI18N
        jPanel3.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel4.setName("jPanel4"); // NOI18N

        jLabel4.setText(bundle.getString("label.rptfolder")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        txtFolder.setToolTipText("Select the path for crystal reports");
        txtFolder.setName("txtFolder"); // NOI18N

        btnSelect.setText("...");
        btnSelect.setName("btnSelect"); // NOI18N
        btnSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectActionPerformed(evt);
            }
        });

        jLabel5.setText(bundle.getString("label.pattern")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        txtPattern.setToolTipText("Pattern can include wild cards like *.  Multiple table names can be separated by \",\"");
        txtPattern.setName("txtPattern"); // NOI18N

        btnSearch.setMnemonic('S');
        btnSearch.setText("Search");
        btnSearch.setMaximumSize(new java.awt.Dimension(100, 23));
        btnSearch.setMinimumSize(new java.awt.Dimension(70, 25));
        btnSearch.setName("btnSearch"); // NOI18N
        btnSearch.setPreferredSize(new java.awt.Dimension(70, 25));
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        lblLoader.setMinimumSize(new java.awt.Dimension(130, 20));
        lblLoader.setName("lblLoader"); // NOI18N
        lblLoader.setPreferredSize(new java.awt.Dimension(130, 20));

        chkClear.setMnemonic('L');
        chkClear.setText("Clear Logs");
        chkClear.setToolTipText("Clear logs before each run");
        chkClear.setName("chkClear"); // NOI18N

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnSearch, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(chkClear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblLoader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(441, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFolder)
                            .addComponent(txtPattern))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSelect))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtFolder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSelect))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtPattern, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblLoader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkClear))
                .addGap(4, 4, 4))
        );

        jPanel3.add(jPanel4, java.awt.BorderLayout.NORTH);

        splitPane.setDividerLocation(200);
        splitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        splitPane.setResizeWeight(1.0);
        splitPane.setName("splitPane"); // NOI18N
        splitPane.setOneTouchExpandable(true);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        resultList.setModel(GlazedListsSwing.eventListModelWithThreadProxyList(reportsList));
        resultList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        resultList.setName("resultList"); // NOI18N
        resultList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                resultListMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                resultListMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(resultList);

        splitPane.setLeftComponent(jScrollPane1);

        jPanel3.add(splitPane, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

	/**
	 * This method creates JavaFX components. This method creates web engine and web view components and add to the
	 * split pane. This is used for displaying the Log messages in the bottom of the split pane. Webengine is loaded
	 * with Log.html and will be keep communicating various JavaScript functions in it. All interactions with JavaFX
	 * components must be wrapped in Platform.runLater.
	 */
	private void createScene() {
		Platform.runLater(new Runnable() {
			@Override
			public void run() {
				WebView view = new WebView();
				webEngine = view.getEngine();

				//Register an alert handler and show all the messages in JOptionPane.
				webEngine.setOnAlert(new javafx.event.EventHandler<WebEvent<String>>() {
					@Override
					public void handle(final WebEvent<String> event) {
						SwingUtilities.invokeLater(new Runnable() {
							@Override
							public void run() {
								JOptionPane.showMessageDialog(null, event.getData());
							}
						});
					}
				});
				//Load the Log.html from resources
				webEngine.load(getClass().getResource("/resources/Log.html").toExternalForm());
				//Once the page is loaded init logging handler
				webEngine.getLoadWorker().stateProperty().addListener(new ChangeListener<Worker.State>() {
					@Override
					public void changed(ObservableValue<? extends Worker.State> observableValue, Worker.State oldState, Worker.State newState) {
						if (newState == Worker.State.SUCCEEDED) {
							initLogging();
						}
					}
				});

				jfxPanel.setScene(new Scene(view));
			}
		});
	}

	/**
	 * Action handler on select button. This will open the file chooser to select the reports folder.
	 *
	 * @param evt
	 */
    private void btnSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectActionPerformed
		// If there is a path given in the textfield use it as a starting folder.
		if (!StringUtils.isBlank(txtFolder.getText())) {
			final File rptFolder = new File(txtFolder.getText().trim());
			if (rptFolder.exists() && rptFolder.isDirectory() && rptFolder.canRead()) {
				fileChooser.setCurrentDirectory(rptFolder);
			}
		}
		if (fileChooser.showOpenDialog(this) != JFileChooser.APPROVE_OPTION) {
			return;
		}
		txtFolder.setText(fileChooser.getSelectedFile().getAbsolutePath());
		btnSearch.setEnabled(true);
    }//GEN-LAST:event_btnSelectActionPerformed

	/**
	 * Action handler for the search button. This button label indicates two different states. Initial value of the
	 * label is Search once search is started it will change to Stop. Different actions are performed based on the state
	 * of the label. If label is Search then call initiateSearch method to start the searching. If label is Stop then
	 * stop the current execution.
	 *
	 * @param evt
	 */
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
		switch (btnSearch.getText()) {
			case "Search":
				try {
					initiateSearch();
				} catch (final Throwable e) {
					LOGGER.log(Level.SEVERE, "Error in search", e);
				}
				break;
			case "Stop":
				stopExecution();
				doneSearch();
				break;
		}
    }//GEN-LAST:event_btnSearchActionPerformed

	/**
	 * Mouse handler on JList for showing popup menu
	 *
	 * @param evt
	 */
    private void resultListMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultListMousePressed
		showPopup(evt);
    }//GEN-LAST:event_resultListMousePressed

	/**
	 * Mouse handler on JList for showing popup menu
	 *
	 * @param evt
	 */
    private void resultListMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultListMouseReleased
		showPopup(evt);
    }//GEN-LAST:event_resultListMouseReleased

	/**
	 * Action handler for popup menu item Open Folder. Get the file path from selected item in JList. Open the parent
	 * folder of the crystal report. This will launch the windows explorer and takes to the folder.
	 *
	 * @param evt
	 */
    private void mnuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuOpenActionPerformed
		if (resultList.getSelectedIndex() < 0) {
			return;
		}
		try {
			Desktop.getDesktop().open(reportsList.get(resultList.getSelectedIndex()).getParentFile());
		} catch (IOException ex) {
			Logger.getLogger(CRTableSearcher.class.getName()).log(Level.SEVERE, null, ex);
		}
    }//GEN-LAST:event_mnuOpenActionPerformed

	/**
	 * Action handler for popup menu item Copy to clipboard. Get the full path of the selected item in JList and place
	 * it in System cipboard.
	 *
	 * @param evt
	 */
    private void mnuCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuCopyActionPerformed
		if (resultList.getSelectedIndex() < 0) {
			return;
		}
		final String path = reportsList.get(resultList.getSelectedIndex()).getAbsolutePath();
		final StringSelection stringSelection = new StringSelection(path);
		Toolkit.getDefaultToolkit().getSystemClipboard().setContents(stringSelection, null);
		LOGGER.info("Path copied to clipboard");
    }//GEN-LAST:event_mnuCopyActionPerformed

	/**
	 * Display the popup menu if the mouse event is a popup trigger.
	 *
	 * @param evt
	 */
	private void showPopup(final MouseEvent evt) {
		if (this.reportsList.size() <= 0) {
			return;
		}
		if (evt.isPopupTrigger()) {
			resultList.setSelectedIndex(resultList.locationToIndex(evt.getPoint()));
			listMenu.show(evt.getComponent(), evt.getX(), evt.getY());
		}
	}

	/**
	 * This will shutdown the the execution service and releases the reportStateLatch
	 */
	private void stopExecution() {
		executorService.shutdownNow();
		if (reportStateLatch != null) {
			while (reportStateLatch.getCount() != 0) {
				reportStateLatch.countDown();
			}
		}
	}

	/**
	 * This will reset all the button labels
	 */
	private void doneSearch() {
		LOGGER.entering(__CLASSNAME__, "doneSearch");
		lblLoader.setIcon(null);
		btnSelect.setEnabled(true);
		btnSearch.setText("Search");
		LOGGER.exiting(__CLASSNAME__, "doneSearch");
	}

	/**
	 * Validates the user inputs. Checks whether the report folder exists and readable. Does basic validation for table
	 * search pattern.
	 *
	 * @return true if validation succeeds false otherwise
	 */
	private boolean validateInputs() {
		LOGGER.entering(__CLASSNAME__, "validateInputs");
		//Validate folder
		if (StringUtils.isBlank(txtFolder.getText())) {
			JOptionPane.showMessageDialog(this,
					"Invalid directory path", "Error", JOptionPane.ERROR_MESSAGE);
			txtFolder.requestFocus();
			LOGGER.exiting(__CLASSNAME__, "validateInputs");
			return false;
		}
		final File rptFolder = new File(txtFolder.getText().trim());
		if (!rptFolder.exists() || !rptFolder.isDirectory() || !rptFolder.canRead()) {
			JOptionPane.showMessageDialog(this,
					"Invalid directory path", "Error", JOptionPane.ERROR_MESSAGE);
			txtFolder.requestFocus();
			LOGGER.exiting(__CLASSNAME__, "validateInputs");
			return false;
		}
		//Validate Pattern
		if (StringUtils.isBlank(txtPattern.getText())) {
			txtPattern.requestFocus();
			JOptionPane.showMessageDialog(this,
					"Please select search pattern", "Error", JOptionPane.ERROR_MESSAGE);
			LOGGER.exiting(__CLASSNAME__, "validateInputs");
			return false;
		}
		if (INVALID_CHARS_PATTERN.matcher(txtPattern.getText()).find()) {
			txtPattern.requestFocus();
			JOptionPane.showMessageDialog(this,
					"Search pattern has invalid characters", "Error", JOptionPane.ERROR_MESSAGE);
			LOGGER.exiting(__CLASSNAME__, "validateInputs");
			return false;
		}
		LOGGER.exiting(__CLASSNAME__, "validateInputs");
		return true;
	}

	/**
	 * This method calls validate inputs if all the inputs are valid then searches the given report folder for all
	 * crystal report files. Any file with .rpt extension will be considered as a crystal report file.
	 *
	 * @throws Exception
	 */
	private void initiateSearch() throws Exception {
		LOGGER.entering(__CLASSNAME__, "initiateSearch");
		if (chkClear.isSelected()) {
			LOGGER.info("Clearing Log messages");
			Platform.runLater(new Runnable() {
				@Override
				public void run() {
					webEngine.executeScript("clearLogs()");
				}
			});
		}
		if (!validateInputs()) {
			LOGGER.exiting(__CLASSNAME__, "initiateSearch");
			return;
		}
		//Change button and lables
		btnSearch.setText("Stop");
		btnSelect.setEnabled(false);
		lblLoader.setIcon(loaderIcon);
		//Clear the existing items in the report list.
		if (reportsList.size() > 0) {
			reportsList.getReadWriteLock().writeLock().lock();
			try {
				reportsList.clear();
			} finally {
				reportsList.getReadWriteLock().writeLock().unlock();
			}
		}

		//Start a worker for gathering all files from the given folder
		final SwingWorker<Collection<File>, Void> worker;
		worker = new SwingWorker<Collection<File>, Void>() {
			@Override
			protected Collection<File> doInBackground() throws Exception {
				return FileUtils.listFiles(new File(txtFolder.getText().trim()), new String[]{"rpt"}, true);
			}

			@Override
			protected void done() {
				try {
					performSearch(get());
				} catch (final InterruptedException | ExecutionException th) {
					LOGGER.log(Level.SEVERE, null, th);
				}
			}
		};
		worker.execute();
		LOGGER.exiting(__CLASSNAME__, "initiateSearch");
	}

	/**
	 * This method will be called after gathering list of crystal report files. This method will start task execution
	 * thread for each crystal report file.
	 *
	 * @param files List of crystal files to process
	 */
	private void performSearch(final Collection<File> files) {
		LOGGER.entering(__CLASSNAME__, "performSearch");
		LOGGER.log(Level.INFO, "Number of files: {0}", files.size());
		if (files.size() <= 0) {
			JOptionPane.showMessageDialog(this,
					"No crystal reports found in source path", "Information", JOptionPane.INFORMATION_MESSAGE);
			doneSearch();
			LOGGER.exiting(__CLASSNAME__, "performSearch");
			return;
		}
		//Construct the valid regex pattern from the user input
		String pattern = txtPattern.getText();
		final StringBuilder sb = new StringBuilder(pattern.length());
		for (final char ch : pattern.toCharArray()) {
			switch (ch) {
				case ' ':
					break;
				case '*':
					sb.append(".*");
					break;
				case ',':
					sb.append('|');
					break;
				default:
					sb.append(ch);
					break;
			}
		}
		LOGGER.log(Level.INFO, "searching with pattern: {0}", sb.toString());
		final Pattern searchPattern = Pattern.compile(sb.toString(), Pattern.CASE_INSENSITIVE);


		// Create the latch instance
		reportStateLatch = new CountDownLatch(files.size());
		//Check executorService state if it's terminated or shutdown restart it.
		if (executorService.isTerminated() || executorService.isShutdown()) {
			executorService = Executors.newFixedThreadPool(NUM_WORKER_THREADS);
		}
		for (final File rptFile : files) {
			executorService.submit(new TableSearcherTask(rptFile, searchPattern, reportsList, reportStateLatch));
		}

		// Wait for the tasks to finish.
		final SwingWorker<Void, Void> rptStateMonitor = new SwingWorker<Void, Void>() {
			@Override
			protected Void doInBackground() throws Exception {
				reportStateLatch.await();
				return null;
			}

			@Override
			protected void done() {
				doneSearch();
			}
		};
		rptStateMonitor.execute();
		LOGGER.exiting(__CLASSNAME__, "performSearch");
	}

	/**
	 * This method pushes messages to the Log window using JavaScript call to Webengine. if the log window is not ready
	 * then it prints to console. This method escapes message for valid HTML and JavaScript.
	 *
	 * @param msg Message to be printed
	 * @param level log level
	 */
	public void publishLog(String msg, final Level level) {
		if (!isLoggerReady) {
			System.out.println(msg);
			return;
		}
		//Escape the message
		msg = StringEscapeUtils.escapeHtml(msg);
		msg = msg.replaceAll("(\r\n|\n\r|\r|\n)", "<br />");
		msg = StringEscapeUtils.escapeJavaScript(msg);
		final String escapedMsg = msg;
		//Execute javascript function that is setup in Log.js
		Platform.runLater(new Runnable() {
			@Override
			public void run() {
				webEngine.executeScript("addMessage('" + escapedMsg + "','" + level.getName() + "')");
			}
		});
	}

	/**
	 * This method sets up the logger with appropriate handlers
	 */
	private void initLogging() {
		isLoggerReady = true;
		//Remove the existing consoler loger and add new logger
		final Logger parentLogger = Logger.getLogger("");
		for (final Handler handler : parentLogger.getHandlers()) {
			parentLogger.removeHandler(handler);
		}
		parentLogger.addHandler(LOGHANDLER);
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		LOGGER.setLevel(Level.ALL);
		SwingUtilities.invokeLater(new Runnable() {
			@Override
			public void run() {
				/* Set the Nimbus look and feel */
				//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
				 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
				 */
				try {
					for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
						if ("Nimbus".equals(info.getName())) {
							javax.swing.UIManager.setLookAndFeel(info.getClassName());
							break;
						}
					}
				} catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
					LOGGER.log(Level.SEVERE, null, ex);
				}
				//</editor-fold>
				/* Create and display the form */
				CRTableSearcher searcher = new CRTableSearcher();
				searcher.setLocationRelativeTo(null);
				searcher.setVisible(true);
			}
		});
	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    javax.swing.JButton btnSearch;
    javax.swing.JButton btnSelect;
    javax.swing.JCheckBox chkClear;
    javax.swing.JFileChooser fileChooser;
    javax.swing.JLabel lblLoader;
    javax.swing.JPopupMenu listMenu;
    javax.swing.JList resultList;
    javax.swing.JSplitPane splitPane;
    javax.swing.JTextField txtFolder;
    javax.swing.JTextField txtPattern;
    // End of variables declaration//GEN-END:variables
	public static final String __CLASSNAME__ = CRTableSearcher.class.getName();
	private static final Logger LOGGER = Logger.getLogger(__CLASSNAME__);
	public final LogHandler LOGHANDLER;
	private final Pattern INVALID_CHARS_PATTERN;
	final ImageIcon loaderIcon;
	private static final int NUM_WORKER_THREADS = 3;
	private ExecutorService executorService = Executors.newFixedThreadPool(NUM_WORKER_THREADS);
	private CountDownLatch reportStateLatch;
	private EventList<File> reportsList = new BasicEventList<>();
	private WebEngine webEngine;
	private final JFXPanel jfxPanel;
	private boolean isLoggerReady = false;
}
